{"version":3,"sources":["Header.js","Map.js","App.js","index.js"],"names":["Header","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleAddressClick","window","google","maps","Geocoder","geocode","address","state","results","status","setPosition","geometry","location","lat","lng","handlePositionClick","inputLat","inputLng","nextProps","setState","_this2","react_default","a","createElement","className","htmlFor","id","type","value","placeholder","onChange","event","target","Number","parseFloat","onClick","React","Component","Map","showPosition","position","coords","latitude","longitude","handleClick","latLng","navigator","geolocation","getCurrentPosition","lib","googleMapsApiKey","process","REACT_APP_MAPSAPIKEY","mapContainerStyle","height","width","zoom","center","onLoad","marker","console","log","concat","App","src_Header_0","src_Map_0","ReactDOM","render","src_App_0","document","getElementById"],"mappings":"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","file":"static/js/main.d1b24020.chunk.js","sourcesContent":["import React from 'react';\nimport './Header.css';\n\nclass Header extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            inputLat: this.props.lat,\n            inputLng: this.props.lng,\n            address: ''\n        };\n    }\n\n    componentWillReceiveProps(nextProps) {\n        if (nextProps.lat !== this.state.inputLat || nextProps.lng !== this.state.inputLng) {\n            this.setState({\n                inputLat: nextProps.lat,\n                inputLng: nextProps.lng\n            });\n            // this.getAddress();\n        }\n    }\n\n    handleAddressClick = () => {\n        const geocoder = new window.google.maps.Geocoder();\n        geocoder.geocode({\"address\": this.state.address}, (results, status) => {\n            if (status === \"OK\") {\n                this.props.setPosition(\n                    results[0].geometry.location.lat(),\n                    results[0].geometry.location.lng()\n                );\n            }\n        });\n    }\n\n    handlePositionClick = () => {\n        this.props.setPosition(this.state.inputLat, this.state.inputLng);\n    }\n\n    render() {\n        return (\n            <div className=\"Header\">\n                <div className=\"Title\">Simple Markers</div>\n                <div className=\"Control\">\n                    <div className=\"Control-item\">\n                        <label htmlFor=\"address\" className=\"Label\">Address</label>\n                        <label htmlFor=\"lat\" className=\"Label\">Latitude</label>\n                    </div>\n                    <div className=\"Control-item\">\n                        <input id=\"address\" type=\"text\" value={this.state.address} placeholder=\"Type in an address\"\n                            onChange={(event) => this.setState({address: event.target.value})} />\n                        <div className=\"Control\">\n                            <input id=\"lat\" type=\"text\" value={this.state.inputLat}\n                                onChange={(event) => this.setState({inputLat: Number.parseFloat(event.target.value)})} />\n                            <label htmlFor=\"lng\" className=\"Label\">Longitude</label>\n                            <input id=\"lng\" type=\"text\" value={this.state.inputLng}\n                                onChange={(event) => this.setState({inputLng: Number.parseFloat(event.target.value)})} />\n                        </div>\n                    </div>\n                    <div className=\"Control-item\">\n                        <button onClick={this.handleAddressClick}>Search by Address!</button>\n                        <button onClick={this.handlePositionClick}>Search by Position!</button>\n                    </div>\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default Header;\n","import React from 'react';\nimport { GoogleMap, LoadScript, Marker } from '@react-google-maps/api';\nimport './Map.css';\n\nclass Map extends React.Component {\n    componentDidMount() {\n        if (window.navigator.geolocation) {\n            window.navigator.geolocation.getCurrentPosition(this.showPosition);\n        }\n    }\n\n    showPosition = (position) => {\n        this.props.setPosition(position.coords.latitude, position.coords.longitude);\n    }\n\n    handleClick = (event) => {\n        this.props.setPosition(event.latLng.lat(), event.latLng.lng());\n    }\n\n    render() {\n        return (\n            <LoadScript id=\"script-loader\"\n                googleMapsApiKey={process.env.REACT_APP_MAPSAPIKEY}>\n                <GoogleMap id=\"map\"\n                    mapContainerStyle={{\n                        height: \"100%\",\n                        width: \"100%\"\n                    }}\n                    zoom={18}\n                    center={{\n                        lat: this.props.lat,\n                        lng: this.props.lng\n                    }}\n                    onClick={this.handleClick}>\n                    <Marker\n                        onLoad={marker => {\n                            console.log(`Marker Position: [${marker.position.lat()}, ${marker.position.lng()}]`);\n                        }}\n                        position={{\n                            lat: this.props.lat,\n                            lng: this.props.lng\n                        }}\n                    />\n                </GoogleMap>\n            </LoadScript>\n        )\n    }\n}\n\nexport default Map;\n","import React from 'react';\nimport Header from './Header';\nimport Map from './Map';\nimport './App.css';\n\nclass App extends React.Component {\n    constructor() {\n        super();\n\n        this.state = {\n            lat: 1.3521,\n            lng: 103.8198\n        };\n    }\n\n    setPosition = (lat, lng) => {\n        this.setState({lat, lng})\n    }\n\n    render() {\n        return(\n            <div className=\"App\" >\n                <Header lat={this.state.lat} lng={this.state.lng} setPosition={this.setPosition}></Header>\n                <Map lat={this.state.lat} lng={this.state.lng} setPosition={this.setPosition}></Map>\n            </div>\n        );\n    }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n"],"sourceRoot":""}